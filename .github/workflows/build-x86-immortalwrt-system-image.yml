name: Build x86 immortalwrt system image

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 5 * * 5

env:
  FEEDS_CONF: config/x86-immortalwrt/feeds.conf.default
  CONFIG_FILE: config/x86-immortalwrt/config
  DIY_P1_SH: config/x86-immortalwrt/diy-part1.sh
  DIY_P2_SH: config/x86-immortalwrt/diy-part2.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install $(curl -fsSL https://tinyurl.com/ubuntu2204-make-openwrt)
          sudo -E systemctl daemon-reload
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R runner:runner /builder
          df -Th

      - name: Clone ImmortalWrt source code
        id: codes
        working-directory: /builder
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          LATEST_TAG=$(curl -sL "https://api.github.com/repos/immortalwrt/immortalwrt/tags" | grep -oP '"name": "\K[^"]+' | head -n 1)
          if [[ -z "$LATEST_TAG" ]]; then
            echo "::error::Failed to get the latest tag from the GitHub API."
            exit 1
          fi
          REPO_URL="https://github.com/immortalwrt/immortalwrt"
          FINAL_TAGS_NAME="immortalwrt_${LATEST_TAG}"
          git clone -b ${LATEST_TAG} --single-branch --filter=blob:none ${REPO_URL} x86-openwrt
          ln -sf /builder/x86-openwrt ${GITHUB_WORKSPACE}/x86-openwrt
          echo "build_tag=x86_OpenWrt_${FINAL_TAGS_NAME}_$(date +"%Y.%m.%d")" >> ${GITHUB_OUTPUT}
          echo "REPO_URL=${REPO_URL}" >> ${GITHUB_OUTPUT}
          echo "TAGS_NAME=${FINAL_TAGS_NAME}" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -hT ${PWD}

      - name: Load custom feeds
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} x86-openwrt/feeds.conf.default
          chmod +x ${DIY_P1_SH}
          cd x86-openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P1_SH}

      - name: Update feeds
        run: |
          cd x86-openwrt/ && ./scripts/feeds update -a

      - name: Install feeds
        run: |
          cd x86-openwrt/ && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [[ -d "files" ]] && mv -f files x86-openwrt/files
          [[ -e "${CONFIG_FILE}" ]] && cp -f ${CONFIG_FILE} x86-openwrt/.config
          chmod +x ${DIY_P2_SH}
          cd x86-openwrt/
          ${GITHUB_WORKSPACE}/${DIY_P2_SH}

      - name: Download package
        id: package
        run: |
          cd x86-openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the OpenWrt
        id: compile
        run: |
          cd x86-openwrt/
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear server space
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          cd x86-openwrt/
          [[ -d "output" ]] || mkdir output
          cp -f bin/targets/*/*/*rootfs.tar.gz output/
          cp -f bin/targets/*/*/*squashfs* output/
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          cd output/
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done
          echo "status=success" >> ${GITHUB_OUTPUT}
          df -hT ${PWD}

      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        with:
          tag: ${{ steps.codes.outputs.build_tag }}
          artifacts: x86-openwrt/output/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### 固件信息
            - 适配平台：x86
            - 固件源码: [${{ steps.codes.outputs.TAGS_NAME }}](${{ steps.codes.outputs.REPO_URL }})
            - 默认地址: DHCP
            - 默认密码: password

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        if: ${{ success() }} && !cancelled()
        with:
          keep_latest: 2
          delete_tags: true
          delete_tag_regex: 'x86'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old workflows
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 2
